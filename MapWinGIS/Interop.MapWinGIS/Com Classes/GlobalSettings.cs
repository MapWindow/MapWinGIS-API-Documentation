using System;
using MapWinGIS;
// ReSharper disable CheckNamespace

#if nsp
namespace MapWinGIS
{
#endif

/// <summary>
/// Holds global settings for MapWinGIS. Allows to retrieve GDAL errors.
/// </summary>
/// <remarks>All the properties of this class are defined as global variables and therefore changes in any instance of this 
/// class will affect all the instances of MapWinGIS control hosted by the application.\n\n
/// The major part of properties require advanced understanding of MapWinGIS functioning therefore it's not recommended
/// to change them without a good reason.\n\n
/// Sometimes properties can be added to this class to provide a switch for testing new functions.
/// Such properties may be removed afterwards (GlobalSettings.ShapefileFastUnion for example).</remarks>
/// \new48 Added in version 4.8
#if nsp
#if upd
            public class GlobalSettings : IGlobalSettings
#else
    public class IGlobalSettings
#endif
#else
public class GlobalSettings
#endif
{
    private readonly GlobalSettingsClass _gs = new GlobalSettingsClass();

    /// <summary>
    /// Gets or sets a value which defines the multiplication coefficient for data in decimal degrees.
    /// > The default value is 10000.0.
    /// </summary>
    /// <remarks>The value is used for Clipper library due to the lack of built-in scaling in it. </remarks>
    public double ClipperGcsMultiplicationFactor
    {
        get => _gs.ClipperGcsMultiplicationFactor;
        set => _gs.ClipperGcsMultiplicationFactor = value;
    }

    /// <summary>
    /// Gets or sets a value which is used to weed out long narrow "splintered" polygons generated by geoprocessing routines.
    /// </summary>
    /// <remarks>Polygons with area to perimeter ratio less than this values won't be passed to the output.
    /// > The default value is 0.0001.
    /// </remarks>
    public double MinAreaToPerimeterRatio
    {
        get => _gs.MinAreaToPerimeterRatio;
        set => _gs.MinAreaToPerimeterRatio = value;
    }

    /// <summary>
    /// Gets or sets the minimal area of polygon which will be passed to the output by geoprocessing routines.
    /// </summary>
    /// <remarks>When the data is defined in decimal degrees, this value will be divided into squared conversion factor 
    /// between decimal degrees and meters (roughly 110000 per degree).
    /// > The default value is 1.0.
    /// </remarks>
    public double MinPolygonArea
    {
        get => _gs.MinPolygonArea;
        set => _gs.MinPolygonArea = value;
    }

    /// <summary>
    /// Gets or sets the value which indicates whether all the new instances of Shapefile class will be initialized with the fast mode turned on.
    /// </summary>
    /// <remarks>
    /// > The default value is \c false.</remarks>
    /// \see Shapefile.FastMode
    public bool ShapefileFastMode
    {
        get => _gs.ShapefileFastMode;
        set => _gs.ShapefileFastMode = value;
    }

    /// <summary>
    /// Extracts the last error message reported by GDAL library.
    /// </summary>
    public string GdalLastErrorMsg => _gs.GdalLastErrorMsg;

    /// <summary>
    /// Gets a subtype of the last error reported by GDAL library.
    /// </summary>
    /// <remarks>
    /// > The default value is tkGdalError.GdalErrorUndefined</remarks>
    public tkGdalError GdalLastErrorNo => _gs.GdalLastErrorNo;

    /// <summary>
    /// Gets a type of the last error reported by GDAL library.
    /// </summary>
    /// <remarks>
    /// > The default value is tkGdalErrorType.GdalUndefined</remarks>
    public tkGdalErrorType GdalLastErrorType => _gs.GdalLastErrorType;

    /// <summary>
    /// Gets last error reported by GDAL reprojection routine.
    /// </summary>
    /// <remarks>Can be used to find out the source of failure of Shapefile.Reproject and Shapefile.ReprojectInPlace functions.</remarks>
    public string GdalReprojectionErrorMsg => _gs.GdalReprojectionErrorMsg;

    /// <summary>
    /// Gets or sets GDI+ compositing quality for label drawing which will be used for all newly added layers.
    /// </summary>
    /// <remarks>
    /// > The default value is tkCompositingQuality.HighQuality.</remarks>
    public tkCompositingQuality LabelsCompositingQuality
    {
        get => _gs.LabelsCompositingQuality;
        set => _gs.LabelsCompositingQuality = value;
    }

    /// <summary>
    /// Gets or sets GDI+ smoothing mode for label drawing which will be used for all newly added layers.
    /// </summary>
    /// <remarks>
    /// > The default value is tkSmoothingMode.HighQualityMode.</remarks>
    public tkSmoothingMode LabelsSmoothingMode
    {
        get => _gs.LabelsSmoothingMode;
        set => _gs.LabelsSmoothingMode = value;
    }

    /// <summary>
    /// Clears information about last GDAL error.
    /// </summary>
    /// <remarks>Affects GlobalSettings.GdalLastErrorMsg, GlobalSettings.GdalLastErrorNo, GlobalSettings.GdalLastErrorType, GlobalSettings.GdalReprojectionErrorMsg properties.</remarks>
    public void ResetGdalError()
    {
        _gs.ResetGdalError();
    }

    /// <summary>
    /// Gets or sets a value which affects the speed of Shapefile.Union operation.
    /// </summary>
    /// <remarks>
    /// > The default value is \c true.</remarks>
    public bool ShapefileFastUnion
    {
        get => _gs.ShapefileFastUnion;
        set => _gs.ShapefileFastUnion = value;
    }

    /// <summary>
    /// Gets or sets format to be used for displaying grid datasources using image proxy.
    /// </summary>
    /// <remarks>Methods like Grid.HasImageProxy or Grid.RemoveImageProxy will only 
    /// take into account the format chosen in this property.
    /// > The default value is tkGridProxyFormat.gpfBmpProxy</remarks>
    /// \new490 Added in version 4.9.0
    public tkGridProxyFormat GridProxyFormat
    {
        get => (tkGridProxyFormat)_gs.GridProxyFormat;
        set => _gs.GridProxyFormat = (MapWinGIS.tkGridProxyFormat)value;
    }

    /// <summary>
    /// Gets or sets preferred display mode for grid datasources. 
    /// </summary>
    /// <remarks>This property will be used in AxMap.AddLayer and Grid.OpenAsImage methods 
    /// if Grid.PreferedDisplayMode is set to tkGridProxyMode.gpmAuto.
    /// > The default value is tkGridProxyMode.gpmAuto</remarks>
    /// \new490 Added in version 4.9.0
    public tkGridProxyMode GridProxyMode
    {
        get => (tkGridProxyMode)_gs.GridProxyMode;
        set => _gs.GridProxyMode = (MapWinGIS.tkGridProxyMode)value;
    }

    /// <summary>
    /// Sets collision mode for all instances of Labels class (which represent labels for either shapefiles or images).
    /// </summary>
    /// <remarks>
    /// > The default value is tkCollisionMode.LocalList</remarks>
    /// \new490 Added in version 4.9.0
    public tkCollisionMode LabelsCollisionMode
    {
        get => (tkCollisionMode)_gs.LabelsCollisionMode;
        set => _gs.LabelsCollisionMode = (MapWinGIS.tkCollisionMode)value;
    }

    /// <summary>
    /// Gets or sets maximum allowable size in MB for a grid datasource to be opened without proxy creation.
    /// </summary>
    /// <remarks> For grids with size exceeding the value of this property, proxy image will be created when GridProxyMode
    /// is set to tkGridProxyMode.gpmAuto. For tkGridProxyMode.gpmNoProxy Grid.CanDisplayWithoutProxy will return \c false 
    /// and Grid.OpenAsImage will fail. Grids of smaller size will be rendered directly for all the modes but tkGridProxyMode.gpmUseProxy if
    /// datasources format allows it (see Grid.CanDisplayWithoutProxy).  
    /// Direct rendering of grid datasources is computationally expensive process 
    /// therefore for large datasources rendering may become too slow.
    /// > Default value is 20.0 MB. Zero or negative values set no limitation.</remarks>
    /// \new491 Added in version 4.9.1
    public double MaxDirectGridSizeMb
    {
        get => _gs.MaxDirectGridSizeMb;
        set => _gs.MaxDirectGridSizeMb = value;
    }

    /// <summary>
    /// Gets or sets the maximum allowable number of unique values in grid color scheme. 
    /// </summary>
    /// <remarks>Affects Grid.GeneratedColorScheme when generation method is set to
    /// tkGridSchemeGeneration.gsgUniqueValues or tkGridSchemeGeneration.gsgUniqueValuesOrGradient.
    /// > Default value is 100</remarks>
    /// \new491 Added in version 4.9.1
    public int MaxUniqueValuesCountForGridScheme
    {
        get => _gs.MaxUniqueValuesCountForGridScheme;
        set => _gs.MaxUniqueValuesCountForGridScheme = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether a map will zoom automatically to the first layer added with AxMap.AddLayer.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true</remarks>
    /// \new491 Added in version 4.9.1
    public bool ZoomToFirstLayer
    {
        get => _gs.ZoomToFirstLayer;
        set => _gs.ZoomToFirstLayer = value;
    }

    /// <summary>
    /// Gets the localized version for a specified string used in the GUI.
    /// </summary>
    /// <param name="stringValue">String to get localized version for.</param>
    /// <returns>Localized string.</returns>
    /// \code{.cs}
    /// // Usage:
    /// var gs = new GlobalSettings();
    /// gs.LocalizedString[tkLocalizedStrings.lsKilometers]; // Notice the square brackets
    /// // or
    /// gs.get_LocalizedString(tkLocalizedStrings.lsKilometers); // Notice the parentheses and the 'get_' prefix
    /// \endcode
    /// \new491 Added in version 4.9.1
    public string LocalizedString(tkLocalizedStrings stringValue)
    {
        // ReSharper disable once UseIndexedProperty
        var t = _gs.get_LocalizedString((MapWinGIS.tkLocalizedStrings)tkLocalizedStrings.lsKilometers);
        return _gs.LocalizedString[(MapWinGIS.tkLocalizedStrings)stringValue];
    }

    /// <summary>
    /// Sets the localized version for a specified string used in the GUI.
    /// </summary>
    /// <param name="stringValue">String to set localized version for.</param>
    /// <param name="newValue">New localized value.</param>
    /// \code{.cs}
    /// // Usage:
    /// var gs = new GlobalSettings();
    /// gs.LocalizedString[tkLocalizedStrings.lsMiles] = "Mijl"; // Notice the square brackets
    /// // or
    /// gs.set_LocalizedString(tkLocalizedStrings.lsMiles, "Mijl"); // Notice the parentheses and the 'set_' prefix
    /// \endcode
    /// \new491 Added in version 4.9.1
    public void LocalizedString(tkLocalizedStrings stringValue, string newValue)
    {
        // ReSharper disable once UseIndexedProperty
        _gs.set_LocalizedString((MapWinGIS.tkLocalizedStrings)tkLocalizedStrings.lsMiles, "Mijl");
        _gs.LocalizedString[(MapWinGIS.tkLocalizedStrings)stringValue] = newValue;
    }

    /// <summary>
    /// Gets or sets color scheme to be used for rendering grids.
    /// </summary>
    /// <remarks>The value will be used on passing Grid object to AxMap.AddLayer method.
    /// > Default value is PredefinedColorScheme.SummerMountains.</remarks>
    /// \new491 Added in version 4.9.1
    public PredefinedColorScheme DefaultColorSchemeForGrids
    {
        get => (PredefinedColorScheme)_gs.DefaultColorSchemeForGrids;
        set => _gs.DefaultColorSchemeForGrids = (MapWinGIS.PredefinedColorScheme)value;
    }

    /// <summary>
    /// Gets or sets initial value to be set for Shapefile.GeometryEngine property of newly created shapefiles.
    /// </summary>
    /// <remarks>
    /// > Default value is tkGeometryEngine.engineGeos</remarks>
    /// \new491 Added in version 4.9.1
    public tkGeometryEngine GeometryEngine
    {
        get => (tkGeometryEngine)_gs.GeometryEngine;
        set => _gs.GeometryEngine = (MapWinGIS.tkGeometryEngine)value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether color scheme set in 
    /// GlobalsSettings.DefaultColorSchemeForGrids or a radom one should be used on opening grids.
    /// </summary>
    /// <remarks>The value will be used on passing Grid object to AxMap.AddLayer method.
    /// > Defautl value is \c true.</remarks>
    /// \new491 Added in version 4.9.1
    public bool RandomColorSchemeForGrids
    {
        get => _gs.RandomColorSchemeForGrids;
        set => _gs.RandomColorSchemeForGrids = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether color scheme for grid will be saved to .mwleg 
    /// to be reused on the next opening.
    /// </summary>
    /// <remarks>This value affects only grid datasources rendered by Image class directly.
    /// Color scheme for proxy images will be written on disk despite this values. Without them those proxies become meaningless.
    /// > Default value is \c true.</remarks>
    /// \new491 Added in version 4.9.1
    public bool SaveGridColorSchemeToFile
    {
        get => _gs.SaveGridColorSchemeToFile;
        set => _gs.SaveGridColorSchemeToFile = value;
    }

    /// <summary>
    /// Sets validation mode for input of geoprocessing operations.
    /// </summary>
    /// <remarks>This setting affects only Shapefile objects, while it doesn't affect
    /// single shapes passed as parameters. Check results of validation in Shapefile.LastInputValidation.
    /// > Default value is tkShapeValidationMode.NoValidation.</remarks>
    /// \new491 Added in version 4.9.1
    public tkShapeValidationMode ShapeInputValidationMode
    {
        get => (tkShapeValidationMode)_gs.ShapeInputValidationMode;
        set => _gs.ShapeInputValidationMode = (MapWinGIS.tkShapeValidationMode)value;
    }

    /// <summary>
    /// Sets validation mode for output of geoprocessing operations.
    /// </summary>
    /// <remarks>This setting affects only methods where Shapefile objects are returned as output,
    /// single shapes returned as output are not affected. Check results of validation in Shapefile.LastOutputValidation.
    /// > Default value is tkShapeValidationMode.NoValidation.</remarks>
    /// \new491 Added in version 4.9.1
    public tkShapeValidationMode ShapeOutputValidationMode
    {
        get => (tkShapeValidationMode)_gs.ShapeInputValidationMode;
        set => _gs.ShapeInputValidationMode = (MapWinGIS.tkShapeValidationMode)value;
    }

    /// <summary>
    /// Gets or sets default value of Image.DownsamplingMode property.
    /// </summary>
    /// <remarks>Quality of the image vs performance
    /// > Default value is tkInterpolationMode.imBilinear.</remarks>
    /// \new492 Added in version 4.9.2
    public tkInterpolationMode ImageDownsamplingMode
    {
        get => (tkInterpolationMode)_gs.ImageDownsamplingMode;
        set => _gs.ImageDownsamplingMode = (MapWinGIS.tkInterpolationMode)value;
    }

    /// <summary>
    /// Gets or sets default value of Image.UpsamplingMode property.
    /// </summary>
    /// <remarks>Quality of the image vs performance
    /// > Default value is tkInterpolationMode.imNone.</remarks>
    /// \new492 Added in version 4.9.2
    public tkInterpolationMode ImageUpsamplingMode
    {
        get => (tkInterpolationMode)_gs.ImageUpsamplingMode;
        set => _gs.ImageUpsamplingMode = (MapWinGIS.tkInterpolationMode)value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether layer symbology from .mwsymb XML file
    /// should be automatically applied on adding layer to the map.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new492 Added in version 4.9.2
    public bool LoadSymbologyOnAddLayer
    {
        get => _gs.LoadSymbologyOnAddLayer;
        set => _gs.LoadSymbologyOnAddLayer = value;
    }

    /// <summary>
    /// Gets or sets the minimum width of image for GDAL overviews to be created.
    /// For images with smaller width no GDAL overviews will be created. 
    /// </summary>
    /// <remarks>
    /// > Default value is \c 512</remarks>
    /// \new492 Added in version 4.9.2
    public int MinOverviewWidth
    {
        get => _gs.MinOverviewWidth;
        set => _gs.MinOverviewWidth = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether automatic creation of GDAL overviews will
    /// be performed for large datasets.
    /// </summary>
    /// <remarks>Currently applied to grid datasets only (both direct and proxy rendering).
    /// No automatic overview creation for RGB image is implemented so far.
    /// > Default value is tkRasterOverviewCreation.rocAuto.</remarks>
    /// \new492 Added in version 4.9.2
    public tkRasterOverviewCreation RasterOverviewCreation
    {
        get => (tkRasterOverviewCreation)_gs.RasterOverviewCreation;
        set => _gs.RasterOverviewCreation = (MapWinGIS.tkRasterOverviewCreation)value;
    }

    /// <summary>
    /// Gets or sets resampling method for creation of GDAL overviews.
    /// </summary>
    /// <remarks>
    /// > Default value is tkGDALResamplingMethod.grmNearest.</remarks>
    /// \new492 Added in version 4.9.2
    public tkGDALResamplingMethod RasterOverviewResampling
    {
        get => (tkGDALResamplingMethod)_gs.RasterOverviewResampling;
        set => _gs.RasterOverviewResampling = (MapWinGIS.tkGDALResamplingMethod)value;
    }

    /// <summary>
    /// Gets or sets compression mode to be used for TIFF proxies created for grid rendering.
    /// </summary>
    /// <remarks>
    /// > Default value: tkTiffCompression.tkmLZW.</remarks>
    /// \new492 Added in version 4.9.2
    public tkTiffCompression TiffCompression
    {
        get => (tkTiffCompression)_gs.TiffCompression;
        set => _gs.TiffCompression = (MapWinGIS.tkTiffCompression)value;
    }

    /// <summary>
    /// Gets or sets minimum available zoom level for tiles when map projection and server projection don't match.
    /// </summary>
    /// <remarks>This value will be used for any provider which uses Spherical Mercator projection
    /// while map projection isn't set to Spherical Mercator or WGS84.
    /// 
    /// Smaller zoom levels (1-5) typically have severe distortions caused by coordinate transformation
    /// which makes them unusable. Tiles won't be displayed at all for these levels and they will 
    /// not be included into the zoom bar.
    /// > Default value is \c 6.</remarks>
    /// \new492 Added in version 4.9.2
    public int TilesMinZoomOnProjectionMismatch
    {
        get => _gs.TilesMinZoomOnProjectionMismatch;
        set => _gs.TilesMinZoomOnProjectionMismatch = value;
    }

    /// <summary>
    /// Gets or sets the number of threads to be used for downloading tiles from remote server.
    /// </summary>
    /// <remarks> Increasing the number of threads doesn't necessarily lead to better 
    /// performance as servers may limit the number of simultaneous connections from the same IP 
    /// address.
    /// > Default value is 5.
    /// </remarks>
    /// \new492 Added in version 4.9.2
    public int TilesThreadPoolSize
    {
        get => _gs.TilesThreadPoolSize;
        set => _gs.TilesThreadPoolSize = value;
    }

    /// <summary>
    /// Gets or sets string encoding used to communicate with OGR drivers.
    /// </summary>
    /// <remarks>
    /// > Default value is tkOgrEncoding.oseUtf8.</remarks>
    /// \new493 Added in version 4.9.3
    public tkOgrEncoding OgrStringEncoding
    {
        get => (tkOgrEncoding)_gs.OgrStringEncoding;
        set => _gs.OgrStringEncoding = (MapWinGIS.tkOgrEncoding)value;
    }

    /// <summary>
    /// Gets or sets the maximum number of features that can be loaded into memory for a single 
    /// OGR layer.
    /// </summary>
    /// <remarks>
    /// > Default value is \c 50 000</remarks>
    /// \see OgrLayer.MaxFeatureCount
    /// \new493 Added in version 4.9.3
    public int OgrLayerMaxFeatureCount
    {
        get => _gs.OgrLayerMaxFeatureCount;
        set => _gs.OgrLayerMaxFeatureCount = value;
    }

    /// <summary>
    /// Gets or sets a value which indicates whether to interpret 
    /// single-character Ogr strings as Logical/Boolean values, as long as the character contained
    /// in the string is one of valid DBF logical characters (e.g. Y, N, T, F).
    /// </summary>
    /// <remarks>Applies to conversion of OGR Shapefile layers to MapWinGIS Shapefiles (via GetBuffer), since 
    /// OGR Shapefiles do not support Logical fields. Instead, DBF Logical fields are read as single-
    /// character strings.
    /// > Default value is \c true.
    /// </remarks>
    /// \new495 Added in version 4.9.5
    public bool OgrInterpretYNStringAsBoolean
    {
        get => _gs.OgrInterpretYNStringAsBoolean;
        set => _gs.OgrInterpretYNStringAsBoolean = value;
    }

    /// <summary>
    /// Allow layers with incomplete reprojection.
    /// </summary>
    /// <remarks>
    /// > Default value is \c false</remarks>
    /// \new510 Added in version 5.1.0
    public bool AllowLayersWithIncompleteReprojection
    {
        get => _gs.AllowLayersWithIncompleteReprojection;
        set => _gs.AllowLayersWithIncompleteReprojection = value;
    }

    /// <summary>
    /// Gets or sets a value which indicates whether OgrLayer.DynamicLoading mode will be
    /// chosen automatically based on the number of features.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true</remarks>
    /// \new493 Added in version 4.9.3
    public bool AutoChooseOgrLoadingMode
    {
        get => _gs.AutoChooseOgrLoadingMode;
        set => _gs.AutoChooseOgrLoadingMode = value;
    }

    /// <summary>
    /// Gets or sets maximum number of shapes within view for hot tracking functionality to work.
    /// </summary>
    /// <remarks>Hot tracking is used by tkCursorMode.cmIdentify tool and interactive editing tools.
    /// > Default value is \c 200</remarks>
    /// \see Identifier.HotTracking, ShapeEditor.HighlightVertices.
    /// \new493 Added in version 4.9.3
    public int HotTrackingMaxShapeCount
    {
        get => _gs.HotTrackingMaxShapeCount;
        set => _gs.HotTrackingMaxShapeCount = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether layers without metadata about coordinate system / projection can be added to the map.
    /// </summary>
    /// <remarks>The decision can also be made on per-layer bases
    /// by handling AxMap.LayerProjectionIsEmpty event.
    /// > Default value is \c true.</remarks>
    /// \new493 Added in version 4.9.3
    public bool AllowLayersWithoutProjections
    {
        get => _gs.AllowLayersWithoutProjections;
        set => _gs.AllowLayersWithoutProjections = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether layers with coordinate system / projection different from those of the map can be added to the map.
    /// </summary>
    /// <remarks>In most cases it's not advisable to allow projection mismatch, since relative position of layers with different 
    /// projections won't be correct. The decision can also be made on per-layer bases
    /// by handling AxMap.ProjectionMismatch event.
    /// > Default value is \c false.</remarks>
    /// \new493 Added in version 4.9.3
    public bool AllowProjectionMismatch
    {
        get => _gs.AllowProjectionMismatch;
        set => _gs.AllowProjectionMismatch = value;
    }

    /// <summary>
    /// Gets or sets global callback object to report information about progress and errors taking place inside MapWinGIS.
    /// </summary>
    /// <remarks>The callback object set by this property will override all callback set for particular classes 
    /// (like %Shapefile.GlobalCallback, %AxMap.GlobalCallback). Also it will automatically display internal GDAL error messages.</remarks>
    /// \note It's strongly recommended to use this property rather than setting callback for each and every class.
    /// \new493 Added in version 4.9.3
    public ICallback ApplicationCallback
    {
        get => (ICallback)_gs.ApplicationCallback;
        set => _gs.ApplicationCallback = (MapWinGIS.ICallback)value;
    }

    /// <summary>
    /// Gets or sets a value which limits the maximum number of shapes within a vector layer to run on-the-fly reprojection.
    /// </summary>
    /// <remarks>This property is taken into account when projection mismatch occurs on adding a new layer to the map.
    /// > Default value is \c 50 000.</remarks>
    /// \new493 Added in version 4.9.3
    public int MaxReprojectionShapeCount
    {
        get => _gs.MaxReprojectionShapeCount;
        set => _gs.MaxReprojectionShapeCount = value;
    }

    /// <summary>
    /// Gets or sets a value which determines how close to a particular object mouse cursor should be 
    /// in order to select it with mouse click. 
    /// </summary>
    /// <remarks>
    /// > Default value is \c 20 map units.</remarks>
    /// \new493 Added in version 4.9.3
    public double MouseTolerance
    {
        get => _gs.MouseTolerance;
        set => _gs.MouseTolerance = value;
    }

    /// <summary>
    /// Gets or sets a value which determines whether automatic on-the-fly reprojection of the vector layer
    /// will be performed on adding a new layer to the map with different projection.
    /// </summary>
    /// <remarks>The decision can also be made on per-layer bases by handling AxMap.ProjectionMismatch event.
    /// > Default value is \c false.</remarks>
    /// \see MaxReprojectionShapeCount
    /// \new493 Added in version 4.9.3
    public bool ReprojectLayersOnAdding
    {
        get => _gs.ReprojectLayersOnAdding;
        set => _gs.ReprojectLayersOnAdding = value;
    }

    /// <summary>
    /// When set to true rendering hint for Labels will be chosen automatically to ensure better performance and visual quality.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \see Labels.TextRenderingHint
    /// \new493 Added in version 4.9.3
    public bool AutoChooseRenderingHintForLabels
    {
        get => _gs.AutoChooseRenderingHintForLabels;
        set => _gs.AutoChooseRenderingHintForLabels = value;
    }

    /// <summary>
    /// When set to true, any labels added to any instance of AxMap won't be rendered.
    /// </summary>
    /// <remarks>
    /// > Default value is \c false.</remarks>
    /// \new493 Added in version 4.9.3
    public bool ForceHideLabels
    {
        get => _gs.ForceHideLabels;
        set => _gs.ForceHideLabels = value;
    }

    /// <summary>
    /// Gets the version of GDAL library which current build of MapWinGIS uses.
    /// </summary>
    /// \new493 Added in version 4.9.3
    public string GdalVersion => _gs.GdalVersion;

    /// <summary>
    /// When set to true the opening of any OGR layer will be first made with forUpdate parameter. 
    /// If this first attempt fails, the layer will be opened without update flag.
    /// </summary>
    /// <remarks>
    /// > Default value is \c false.</remarks>
    /// \see OgrLayer.SupportsEditing
    /// \new493 Added in version 4.9.3
    public bool OgrLayerForceUpdateMode
    {
        get => _gs.OgrLayerForceUpdateMode;
        set => _gs.OgrLayerForceUpdateMode = value;
    }

    /// <summary>
    /// Gets or sets pixel offset mode to be used during the rendering of vector layers.
    /// </summary>
    /// <remarks>
    /// > Default value is \c tkPixelOffsetMode.pomDefault.</remarks>
    /// \new493 Added in version 4.9.3
    public tkPixelOffsetMode PixelOffsetMode
    {
        get => (tkPixelOffsetMode)_gs.PixelOffsetMode;
        set => _gs.PixelOffsetMode = (MapWinGIS.tkPixelOffsetMode)value;
    }

    /// <summary>
    /// Gets or sets the path where data necessary for GDAL coordinate systems / projections will be searched for.
    /// </summary>
    /// <remarks>This property effectively overrides GDAL_DATA environment variable. By default
    /// it's set to gdal-data folder in the directory where MapWinGIS is installed.</remarks>
    /// \new493 Added in version 4.9.3
    public string GdalDataPath
    {
        get => _gs.GdalDataPath;
        set => _gs.GdalDataPath = value;
    }

    /// <summary>
    /// Gets or sets the path where GDAL plug-ins will be searched for.
    /// </summary>
    /// <remarks>This property effectively overrides GDAL_DRIVER_PATH environment variable. By default
    /// it's set to gdalplugins folder in the directory where MapWinGIS is installed.</remarks>
    /// \new493 Added in version 4.9.3
    public string GdalPluginPath
    {
        get => _gs.GdalPluginPath;
        set => _gs.GdalPluginPath = value;
    }

    /// <summary>
    /// Gets or sets the path where the PROJ resource files (proj.db) will be searched for (starting with PROJ 6).
    /// </summary>
    /// <remarks>This property effectively overrides PROJ_LIB environment variable. By default
    /// it's set to proj7\share folder in the directory where MapWinGIS is installed.</remarks>
    /// \new54 Added in version 5.4
    public string ProjPath
    {
        get => _gs.ProjPath;
        set => _gs.ProjPath = value;
    }

    /// <summary>
    /// Gets or sets API key to access Bing maps. Without API key Bing Maps provider isn't available.
    /// </summary>
    /// \new493 Added in version 4.9.3
    public string BingApiKey
    {
        get => _gs.BingApiKey;
        set => _gs.BingApiKey = value;
    }

    /// <summary>
    /// Sets application credentials for Here Maps online tiles. 
    /// Without these credentials Here Maps providers are not available. 
    /// </summary>
    /// <remarks>
    /// \note Needs to be updated. Here Maps uses an API key now.</remarks>
    /// <param name="appId">Application Id. Can be obtained by registering on the site of the service.</param>
    /// <param name="appCode">Application code. Can be obtained by registering on the site of the service.</param>
    /// \new493 Added in version 4.9.3
    public void SetHereMapsApiKey(string appId, string appCode)
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Sets the user-agent string that will be used when requesting tiles.
    /// </summary>
    /// <remarks>
    /// > Default value is \c MapWinGIS/5.0</remarks>
    /// <param name="userAgent"></param>
    /// \new510 Added in version 5.1.0
    public void SetHttpUserAgent(string userAgent)
    {
       _gs.SetHttpUserAgent(userAgent);
    }

    /// <summary>
    /// Requests URL address for tiles download from Bing Maps server. 
    /// </summary>
    /// <param name="key">API key to test.</param>
    /// <returns>True if the Url for downloading for obtained.</returns>
    /// \new493 Added in version 4.9.3
    public bool TestBingApiKey(string key)
    {
        return _gs.TestBingApiKey(key);
    }

    /// <summary>
    /// Gets or sets the value indicating which compression mode will be used to compress image overviews.
    /// </summary>
    /// <remarks>The value is read from the GDAL option \c COMPRESS_OVERVIEW
    /// 
    /// Bug fixed in v5.4: MWGIS-309
    /// > Default value is \c tkTiffCompression.tkmNONE.</remarks>
    /// \new494 Added in version 4.9.4
    public tkTiffCompression CompressOverviews
    {
        get => (tkTiffCompression)_gs.CompressOverviews;
        set => _gs.CompressOverviews = (MapWinGIS.tkTiffCompression)value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether greyscale or color scheme rendering will be used for grids by default.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new494 Added in version 4.9.4
    public bool GridFavorGreyscale
    {
        get => _gs.GridFavorGreyscale;
        set => _gs.GridFavorGreyscale = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether histogram will be computed and used for grid by default.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new494 Added in version 4.9.4
    public bool GridUseHistogram
    {
        get => _gs.GridUseHistogram;
        set => _gs.GridUseHistogram = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether instances of ICallback assigned to particular classes will be overriden by 
    /// global callback assined to GlobalSettings.ApplicationCallback property.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new494 Added in version 4.9.4
    public bool OverrideLocalCallback
    {
        get => _gs.OverrideLocalCallback;
        set => _gs.OverrideLocalCallback = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether caching DBF records is enabled.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new494 Added in version 4.9.4
    public bool CacheDbfRecords
    {
        get => _gs.CacheDbfRecords;
        set => _gs.CacheDbfRecords = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether caching of rendering data for shapes is enabled.
    /// </summary>
    /// <remarks>
    /// > Default value is \c false.</remarks>
    /// \new494 Added in version 4.9.4
    public bool CacheShapeRenderingData
    {
        get => _gs.CacheShapeRenderingData;
        set => _gs.CacheShapeRenderingData = value;
    }

    /// <summary>
    /// Gets the filename of the file to log TMS/WMS requests to.
    /// </summary>
    /// \new494 Added in version 4.9.4
    public string TileLogFilename => _gs.TileLogFilename;

    /// <summary>
    /// Gets a value indicating whether tile log is opened.
    /// </summary>
    public bool TileLogIsOpened => _gs.TileLogIsOpened;

    /// <summary>
    /// Gets or sets a value indicating whether only errors will be logged to the for TMS/WMS requests.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new494 Added in version 4.9.4
    public bool LogTileErrorsOnly
    {
        get => _gs.LogTileErrorsOnly;
        set => _gs.LogTileErrorsOnly = value;
    }

    /// <summary>
    /// Gets or sets a value indicating whether WMS data will cached to the disk by default.
    /// </summary>
    /// <remarks>
    /// > Default value is \c true.</remarks>
    /// \new494 Added in version 4.9.4
    public bool WmsDiskCaching
    {
        get => _gs.WmsDiskCaching;
        set => _gs.WmsDiskCaching = value;
    }

    /// <summary>
    /// Gets or sets the callback verbosity.
    /// </summary>
    /// <remarks>
    /// > Default value is \c tkCallbackVerbosity.cvAll</remarks>
    /// \new494 Added in version 4.9.4
    public tkCallbackVerbosity CallbackVerbosity
    {
        get => (tkCallbackVerbosity)_gs.CallbackVerbosity;
        set => _gs.CallbackVerbosity = (MapWinGIS.tkCallbackVerbosity)value;
    }

    /// <summary> 
    /// Share connection between layers (may be unstable). 
    /// For large read-only layers it will increase performance.
    /// </summary>
    /// <remarks>
    /// > Default value is \c false</remarks>
    /// \new494 Added in version 4.9.4
    public bool OgrShareConnection
    {
        get => _gs.OgrShareConnection;
        set => _gs.OgrShareConnection = value;
    }

    /// <summary>
    /// Starts logging of tile requests.
    /// \see Tiles.LogFilename
    /// \see GlobalSettings.StopLogTileRequests
    /// </summary>
    /// <param name="filename">The filename.</param>
    /// <param name="errorsOnly">If set to <c>true</c> only errors will be logged.</param>
    /// <returns>True on success.</returns>
    /// \new494 Added in version 4.9.4
    public bool StartLogTileRequests(string filename, bool errorsOnly = false)
    {
        return _gs.StartLogTileRequests(filename, errorsOnly);
    }

    /// <summary>
    /// Stops the logging of the tile requests to a logfile
    /// \see Tiles.LogFilename
    /// \see GlobalSettings.StartLogTileRequests
    /// </summary>
    public void StopLogTileRequests()
    {
        _gs.StopLogTileRequests();
    }
}
#if nsp
}
#endif

